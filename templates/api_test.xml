<templateSet group="api_test">
  <template name="demo_import_api" value="from tools import request_tool&#10;from tools import assert_tool&#10;from tools import random_tool&#10;from tools import mysql_tool&#10;from tools import excel_tool&#10;from tools import log_tool&#10;from tools import os_tool&#10;from tools import shell_tool&#10;from tools import zip_tool&#10;import pytest&#10;import allure&#10;# 项目根目录建config包，里面建conf.py文件，用于配置&#10;from config import conf&#10;&#10;$body$" description="导入api测试的依赖包" toReformat="false" toShortenFQNames="true">
    <variable name="body" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_tools" value="def test_shell():&#10;    # cmd的echo相当于python的print，打印hello。注意别写中文&#10;    cmd = 'echo hello'&#10;    result = shell_tool.invoke(cmd)&#10;    print(result)&#10;&#10;&#10;def test_log():&#10;    # 日志同时输出到控制台和logs/info.log&#10;    log_tool.info('测试info日志')&#10;    try:&#10;        excel_tool.get_test_case('')&#10;    except Exception as e:&#10;        # 日志同时输出到控制台和logs/error.log&#10;        log_tool.error('测试error日志')&#10;        log_tool.error(e)&#10;&#10;&#10;def test_excel():&#10;    data = excel_tool.get_test_case('data/注册接口sign_up.xlsx')&#10;    # 第一列测试用例名&#10;    print(data[0])&#10;    # 测试用例数据集[]&#10;    print(data[1])&#10;    # 第1条测试数据&#10;    print(data[1][0])&#10;    # 第2条测试数据&#10;    print(data[1][1])&#10;    # 第3条测试数据&#10;    print(data[1][2])&#10;&#10;&#10;def test_mysql():&#10;    # 写SQL&#10;    sql = 'SELECT * FROM t_user_user '&#10;    row = mysql_tool.query_one(sql)&#10;    print(row)&#10;    user_name = row['user_name']&#10;    pwd = row['pwd']&#10;&#10;&#10;def test_random():&#10;    # 随机电话&#10;    tell = random_tool.random_tell()&#10;    # 随机密码&#10;    pwd = random_tool.random_pwd()&#10;    # 随机数字：0-1&#10;    number1 = random_tool.random_number()&#10;    # 随机数字：3-5&#10;    number2 = random_tool.random_number(3, 5)&#10;    # 随机数字：0-10中的（0,3，6,9）&#10;    number3 = random_tool.random_number(0, 10, 3)&#10;    # 随机姓名（不分性别）&#10;    name = random_tool.random_name()&#10;    # 随机姓名：男&#10;    boy = random_tool.random_name(0)&#10;    # 随机姓名：女&#10;    girl = random_tool.random_name(1)&#10;    # 随机用户名（拼音）&#10;    name1 = random_tool.random_name_pinyin()&#10;    # 生成指定用户名：果芽&#10;    name2 = random_tool.random_name_pinyin('果芽')&#10;    # 随机地址：上海市&#10;    addr = random_tool.random_addr()&#10;    # 随机邮箱&#10;    email = random_tool.random_email()&#10;    # 随机性别：0（男），1（女）&#10;    sex = random_tool.random_sex()&#10;" description="演示tools工具包的用法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_tools_shell" value="&#10;def test_shell():&#10;    # cmd的echo相当于python的print，打印hello。注意别写中文&#10;    cmd = 'echo hello'&#10;    result = shell_tool.invoke(cmd)&#10;    print(result)&#10;&#10;" description="演示tools工具包的shell_tool用法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_tools_log" value="def test_log():&#10;    # 日志同时输出到控制台和logs/info.log&#10;    log_tool.info('测试info日志')&#10;    try:&#10;        excel_tool.get_test_case('')&#10;    except Exception as e:&#10;        # 日志同时输出到控制台和logs/error.log&#10;        log_tool.error('测试error日志')&#10;        log_tool.error(e)&#10;&#10;" description="演示tools工具包的shell_tool用法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_tools_excel" value="def test_excel():&#10;    data = excel_tool.get_test_case('data/注册接口sign_up.xlsx')&#10;    # 第一列测试用例名&#10;    print(data[0])&#10;    # 测试用例数据集[]&#10;    print(data[1])&#10;    # 第1条测试数据&#10;    print(data[1][0])&#10;    # 第2条测试数据&#10;    print(data[1][1])&#10;    # 第3条测试数据&#10;    print(data[1][2])&#10;" description="演示tools工具包的excel_tool用法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_tools_random" value="def test_random():&#10;    # 随机电话&#10;    tell = random_tool.random_tell()&#10;    # 随机密码&#10;    pwd = random_tool.random_pwd()&#10;    # 随机数字：0-1&#10;    number1 = random_tool.random_number()&#10;    # 随机数字：3-5&#10;    number2 = random_tool.random_number(3, 5)&#10;    # 随机数字：0-10中的（0,3，6,9）&#10;    number3 = random_tool.random_number(0, 10, 3)&#10;    # 随机姓名（不分性别）&#10;    name = random_tool.random_name()&#10;    # 随机姓名：男&#10;    boy = random_tool.random_name(0)&#10;    # 随机姓名：女&#10;    girl = random_tool.random_name(1)&#10;    # 随机用户名（拼音）&#10;    name1 = random_tool.random_name_pinyin()&#10;    # 生成指定用户名：果芽&#10;    name2 = random_tool.random_name_pinyin('果芽')&#10;    # 随机地址：上海市&#10;    addr = random_tool.random_addr()&#10;    # 随机邮箱&#10;    email = random_tool.random_email()&#10;    # 随机性别：0（男），1（女）&#10;    sex = random_tool.random_sex()&#10;" description="演示tools工具包的random_tool用法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_tools_mysql" value="def test_mysql():&#10;    # 获取db链接信息，json格式&#10;    db = conf.DB_URL&#10;    # 写SQL&#10;    sql = 'SELECT * FROM t_user_user '&#10;    row = mysql_tool.query_one(sql,db)&#10;    print(row)&#10;    user_name = row['user_name']&#10;    pwd = row['pwd']&#10;    &#10; " description="演示tools工具包的mysql_tool用法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_conf_db" value="# 数据库调用地址&#10;DB_URL = {&#10;    'host': 'qa.guoyasoft.com',&#10;    'port': 3306,&#10;    'db': 'guoya_virtual_mall_1811',&#10;    'user': 'root',&#10;    'passwd': 'Guoya006',&#10;    'charset': 'utf8'&#10;}&#10;" description="数据库配置模板" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_conf_api" value="GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;" description="接口地址" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="help" value="##################################&#10;# help:帮助文档&#10;# demo:给出所有快捷键&#10;##################################&#10;&#10;##################################&#10;# demo_conf:配置模板&#10;# demo_import:导入模板&#10;# demo_api:接口调用模板&#10;# demo_tools:工具用法演示&#10;##################################&#10;&#10;##################################&#10;# demo_conf_api：接口url地址模板&#10;# demo_conf_db:数据库配置模板&#10;##################################&#10;&#10;##################################&#10;# demo_import_api：接口测试导入模板&#10;##################################&#10;&#10;##################################&#10;# demo_tools:工具包全部使用模板&#10;# demo_tools_excel:excel工具使用模板&#10;# demo_tools_mysql:mysql工具使用模板&#10;# demo_tools_random:random工具使用模板&#10;# demo_tools_log:log工具使用模板&#10;# demo_tools_shell:shell工具使用模板&#10;##################################&#10;&#10;##################################&#10;# demo_api_login：登陆接口模板（4种模板）&#10;# demo_api_login：登陆接口模板-常量&#10;# demo_api_login_var：登陆接口模板-变量&#10;# demo_api_login_param：登陆接口模板-参数化（数据分离）&#10;# demo_api_login_zuhe：登陆接口模板-组合使用（常量+变量+参数化）&#10;##################################&#10;" description="帮助手册" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_conf_token" value="@pytest.fixture(scope='session')&#10;def driver_data():&#10;    driver_data = {}&#10;    sign_data = sign_up()&#10;    login_data = login(sign_data)&#10;    driver_data.update(sign_data)&#10;    driver_data.update(login_data)&#10;    return driver_data&#10;&#10;def login(sign_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = conf.GY_API_URL+'/login'&#10;    req = {&#10;        &quot;pwd&quot;: sign_data['pwd'],&#10;        &quot;userName&quot;: sign_data['user_name']&#10;    }&#10;    resp = request_tool.post_request(url,json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'],2000)&#10;    data =body['data']&#10;    if data !='':&#10;        token = data['token']&#10;        assert_tool.assert_not_null(token)&#10;&#10;    login_data = {}&#10;    login_data['token']=token&#10;    return login_data&#10;&#10;def sign_up():&#10;    sign_data = {}&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = conf.GY_API_URL + '/signup'&#10;    phone = random_tool.random_tell()&#10;    pwd = random_tool.random_pwd()&#10;    pinyin = random_tool.random_name_pinyin()&#10;    num = str(random_tool.random_number(0,9))&#10;    user_name = pinyin+num&#10;&#10;    req = {&#10;        &quot;phone&quot;: phone,&#10;        &quot;pwd&quot;: pwd,&#10;        &quot;rePwd&quot;: pwd,&#10;        &quot;userName&quot;: user_name&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;    data = body['data']&#10;    if data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;&#10;&#10;    sign_data['phone']=phone&#10;    sign_data['pwd']=pwd&#10;    sign_data['user_name']=user_name&#10;    return sign_data" description="公共登陆" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_get_qury" value="def test_getCustomer(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/cst/getCustomer'&#10;    req = {'phone':driver_data['phone']}&#10;    # req = {'phone':'15113794711'}&#10;    headers = {&#10;            'token':driver_data['token'],&#10;            'charset':'UTF-8'&#10;    }&#10;    resp = request_tool.get_request(url,params=req,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="http的get请求，qury参数" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_get_path" value="def test_change_pwd(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/cst/getAll/1/3'&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.get_request(url,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="http的get请求，path参数" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_get_path_qury" value="def test_get_SKU(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    page_num = 1&#10;    page_size = 3&#10;    url = 'http://dev.guoyasoft.com:8080/product/getSKU/%s/%s' % (page_num, page_size)&#10;    req = {&#10;        'status': 0,&#10;        'startTime': '2018-10-18 09:41:18',&#10;        'endTime': '2019-10-19 10:41:18'&#10;    }&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.get_request(url, params=req, headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="http的get请求，path+qury" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_post_qury" value="def test_full_sku(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/product/fullSku'&#10;    req = {&#10;        &quot;skuCode&quot;: &quot;4l300_红色_max500&quot;,&#10;        &quot;qty&quot;: 10&#10;    }&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.post_request(url, params=req,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="http的post请求，qury参数" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_post_form" value="def test_lock(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/user/lock'&#10;    req = {'userName': driver_data['user_name']}&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8',&#10;        'Content-Type': 'application/x-www-form-urlencoded'&#10;    }&#10;    resp = request_tool.post_request(url, data=req, headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="http的post请求，form-data表单" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_post_json" value="def test_change_pwd_var(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = conf.GY_API_URL + '/user/changepwd'&#10;    pwd = random_tool.random_pwd()&#10;    req = {&#10;        &quot;newPwd&quot;: pwd,&#10;        &quot;oldPwd&quot;: driver_data['pwd'],&#10;        &quot;reNewPwd&quot;: pwd,&#10;        &quot;userName&quot;: driver_data['user_name']&#10;    }&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.post_request(url, json=req, headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)" description="http的post请求，json格式" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_get_download_file" value="def test_download_file(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/product/downProdRepertory'&#10;    prid_code = '4l300'&#10;    req = {'pridCode': prid_code}&#10;    headers = {&#10;            'token':driver_data['token'],&#10;            'charset':'UTF-8'&#10;    }&#10;    resp = request_tool.get_request(url,params=req,headers=headers)&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    file = resp.content&#10;&#10;    root_path = os_tool.get_root_path()+'download'&#10;    os_tool.mkdir(root_path)&#10;    file_path = '%s/pro_repository_%s.xls'%(root_path,prid_code)&#10;    log_tool.debug(file_path)&#10;    # 1. 写二进制文件：wb&#10;    # 2. 读写二进制，不需要带encoding参数&#10;    with open(file_path,'wb') as f:&#10;        f.write(file)&#10;" description="http的post请求，下载文件" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_token" value="def test_getCustomer(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/cst/getCustomer'&#10;    req = {'phone':driver_data['phone']}&#10;    # req = {'phone':'15113794711'}&#10;    headers = {&#10;            'token':driver_data['token'],&#10;            'charset':'UTF-8'&#10;    }&#10;    resp = request_tool.get_request(url,params=req,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="http请求，带token" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_post_upload_file" value="def test_post_upload_file(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/product/uploaProdRepertory'&#10;    root_path = os_tool.get_root_path()&#10;    file_path = root_path+'download/pro_repository_4l300.xls'&#10;    file = {'file': open(file_path,'rb')}&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.post_request(url, files=file, headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="http请求，上传文件" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_http_https" value="def test_sign_up():&#10;    url = 'https://www.dev.guoyasoft.com/signup'&#10;    req = {&#10;        &quot;phone&quot;: &quot;18716253252&quot;,&#10;        &quot;pwd&quot;: &quot;aaa123&quot;,&#10;        &quot;rePwd&quot;: &quot;aaa123&quot;,&#10;        &quot;userName&quot;: &quot;wuling98&quot;&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    print(body)&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;    data = body['data']&#10;    if data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;" description="http请求，https请求" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_data_constants" value="def test_sign_up():&#10;    url = 'http://dev.guoyasoft.com:8080/signup'&#10;    req = {&#10;        &quot;phone&quot;: &quot;18716253215&quot;,&#10;        &quot;pwd&quot;: &quot;aaa123&quot;,&#10;        &quot;rePwd&quot;: &quot;aaa123&quot;,&#10;        &quot;userName&quot;: &quot;wuling90&quot;&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;    data = body['data']&#10;    if data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;" description="接口请求数据，常量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_data_varibles" value="def test_sign_up_var():&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = conf.GY_API_URL + '/signup'&#10;    phone = random_tool.random_tell()&#10;    pwd = random_tool.random_pwd()&#10;    pinyin = random_tool.random_name_pinyin()&#10;    num = str(random_tool.random_number(0,9))&#10;    user_name = pinyin+num&#10;    req = {&#10;        &quot;phone&quot;: phone,&#10;        &quot;pwd&quot;: pwd,&#10;        &quot;rePwd&quot;: pwd,&#10;        &quot;userName&quot;: user_name&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;    data = body['data']&#10;    if data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;&#10;" description="接口请求数据，随机变量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_data_db" value="def test_login_var():&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = conf.GY_API_URL+'/login'&#10;    sql = 'select * from t_user_user limit 1'&#10;    # 先再config/conf.py里面配置DB_URL，模板快捷键demo_conf_db&#10;    db = conf.DB_URL&#10;    user = mysql_tool.query_one(sql,db)&#10;    req = {&#10;        &quot;pwd&quot;: user['pwd'],&#10;        &quot;userName&quot;: user['user_name']&#10;    }&#10;    resp = request_tool.post_request(url,json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'],2000)&#10;    data =body['data']&#10;    if data !='':&#10;        token = data['token']&#10;        assert_tool.assert_not_null(token)&#10;&#10;&#10;" description="接口请求数据，数据库" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_data_paramters" value="&#10;########### 注册接口sign_up.xlsx ################&#10;# case_name&#9;i_user_name&#9;i_pwd&#9;i_repwd&#9;i_phone&#9;o_code&#9;o_userId&#10;# 注册成功&#9;wuling1323&#9;aaaa123&#9;aaaa123&#9;18699872345&#9;2000&#9;not null&#10;# 用户名已存在&#9;wuling1323&#9;aaaa123&#9;aaaa123&#9;18699872346&#9;9999&#10;# 手机号已存在&#9;wuling1324&#9;aaaa123&#9;aaaa123&#9;18699872345&#9;9999&#10;#############################################&#10;data = excel_tool.get_test_case('data/注册接口sign_up.xlsx')&#10;&#10;@pytest.mark.parametrize('i_user_name,i_pwd,i_repwd,i_phone,o_code,o_userId', data[1], ids=data[0])&#10;def test_sign_up_param(i_user_name, i_pwd, i_repwd, i_phone, o_code, o_userId):&#10;    # config/conf.py里面配置GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;    url = conf.GY_API_URL + '/signup'&#10;    req = {&#10;        &quot;phone&quot;: i_phone,&#10;        &quot;pwd&quot;: i_pwd,&#10;        &quot;rePwd&quot;: i_repwd,&#10;        &quot;userName&quot;: i_user_name&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], o_code)&#10;    data = body['data']&#10;    if o_userId == 'not null' and data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;" description="接口请求数据，外部数据" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_data_together" value="&#10;########### 注册接口sign_up.xlsx ################&#10;# case_name&#9;i_user_name&#9;i_pwd&#9;i_repwd&#9;i_phone&#9;o_code&#9;o_userId&#10;# 注册成功&#9;自动生成&#9;自动生成&#9;自动生成&#9;自动生成&#9;2000&#9;not null&#10;# 用户名已存在&#9;wuling1323&#9;自动生成&#9;自动生成&#9;自动生成&#9;9999&#10;# 手机号已存在&#9;自动生成&#9;自动生成&#9;自动生成&#9;18699872345&#9;9999&#10;#############################################&#10;data = excel_tool.get_test_case('data/user/注册接口sign_up.xlsx')&#10;&#10;@pytest.mark.parametrize('i_user_name,i_pwd,i_repwd,i_phone,o_code,o_userId', data[1], ids=data[0])&#10;def test_sign_up_together(i_user_name, i_pwd, i_repwd, i_phone, o_code, o_userId):&#10;    # config/conf.py里面配置GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;    url = conf.GY_API_URL + '/signup'&#10;    if i_user_name == '自动生成':&#10;        pinyin=random_tool.random_name_pinyin()&#10;        num=str(random_tool.random_number(0,9))&#10;        i_user_name = pinyin+num&#10;    if i_pwd == '自动生成':&#10;        i_pwd=random_tool.random_pwd()&#10;    if i_repwd == '自动生成':&#10;        i_repwd=i_pwd&#10;    if i_phone == '自动生成':&#10;        i_phone = random_tool.random_tell()&#10;&#10;    req = {&#10;        &quot;phone&quot;: i_phone,&#10;        &quot;pwd&quot;: i_pwd,&#10;        &quot;rePwd&quot;: i_repwd,&#10;        &quot;userName&quot;: i_user_name&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], o_code)&#10;    data = body['data']&#10;    if o_userId == 'not null' and data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;&#10;" description="接口请求数据，组合：常量+随机+DB+外部数据" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_init_env" value="# 在terminal控制台输入命令：&#10;# pip install --upgrade guoya-api-test" description="初始化API环境" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_init_project" value="from tools import init_tool&#10;&#10;init_tool.init_api_project()" description="初始化API工程" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>