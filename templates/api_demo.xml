<templateSet group="api_demo">
  <template name="dem_api_change_pwd_zuhe" value="###########登陆接口login.xlsx################&#10;# case_name&#9;i_userName&#9;i_oldPwd&#9;i_newPwd&#9;i_reNewPwd&#9;o_code&#10;# 修改成功&#9;自动生成&#9;自动生成&#9;自动生成&#9;自动生成&#9;2000&#10;# 用户名不存在&#9;ZVMBpH4245&#9;自动生成&#9;自动生成&#9;自动生成&#9;9999&#10;# 老密码错误&#9;自动生成&#9;abc123457&#9;自动生成&#9;自动生成&#9;9999&#10;# 新密码不一致&#9;自动生成&#9;自动生成&#9;自动生成&#9;ccc123&#9;9999&#10;#############################################&#10;data = excel_tool.get_test_case('data/user/修改密码changePwd_组合.xlsx')&#10;&#10;@pytest.mark.parametrize('i_userName,i_oldPwd,i_newPwd,i_reNewPwd,o_code', data[1], ids=data[0])&#10;def test_change_pwd_zuhe(i_userName, i_oldPwd, i_newPwd, i_reNewPwd, o_code,driver_data):&#10;    # config/conf.py里面配置GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;    url = conf.GY_API_URL + '/user/changepwd'&#10;    if i_userName == '自动生成':&#10;        i_userName = driver_data['user_name']&#10;    if i_oldPwd == '自动生成':&#10;        i_oldPwd == driver_data['pwd']&#10;    if i_newPwd == '自动生成':&#10;        i_newPwd == random_tool.random_pwd()&#10;    if i_reNewPwd == '自动生成':&#10;        i_reNewPwd = i_newPwd&#10;        &#10;    req = {&#10;        &quot;newPwd&quot;: i_newPwd,&#10;        &quot;oldPwd&quot;: i_oldPwd,&#10;        &quot;reNewPwd&quot;: i_reNewPwd,&#10;        &quot;userName&quot;: i_userName&#10;    }&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.post_request(url, json=req,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], o_code)&#10;" description="修改密码接口，常量+变量+参数化-组合使用" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_change_pwd" value="def test_change_pwd(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/user/changepwd'&#10;    req = {&#10;        &quot;newPwd&quot;: &quot;aaa123&quot;,&#10;        &quot;oldPwd&quot;: &quot;yufei1&quot;,&#10;        &quot;reNewPwd&quot;: &quot;aaa123&quot;,&#10;        &quot;userName&quot;: &quot;xuyf2&quot;&#10;    }&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.post_request(url, json=req,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="修改密码接口，常量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_change_pwd_param" value="###########登陆接口login.xlsx################&#10;# case_name&#9;i_userName&#9;i_oldPwd&#9;i_newPwd&#9;i_reNewPwd&#9;o_code&#10;# 修改成功&#9;ZVMBpH4244&#9;abc123456&#9;aaa123&#9;aaa123&#9;2000&#10;# 用户名不存在&#9;ZVMBpH4245&#9;abc123456&#9;aaa123&#9;aaa123&#9;9999&#10;# 老密码错误&#9;ZVMBpH4244&#9;abc123457&#9;aaa123&#9;aaa123&#9;9999&#10;# 新密码不一致&#9;ZVMBpH4244&#9;aaa123&#9;bbb123&#9;ccc123&#9;9000&#10;#############################################&#10;data = excel_tool.get_test_case('data/user/修改密码changePwd.xlsx')&#10;&#10;@pytest.mark.parametrize('i_userName,i_oldPwd,i_newPwd,i_reNewPwd,o_code', data[1], ids=data[0])&#10;def test_change_pwd_param(i_userName, i_oldPwd, i_newPwd, i_reNewPwd, o_code):&#10;    # config/conf.py里面配置GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;    url = conf.GY_API_URL + '/user/changepwd'&#10;    req = {&#10;        &quot;newPwd&quot;: i_newPwd,&#10;        &quot;oldPwd&quot;: i_oldPwd,&#10;        &quot;reNewPwd&quot;: i_reNewPwd,&#10;        &quot;userName&quot;: i_userName&#10;    }&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.post_request(url, json=req,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], o_code)" description="修改密码接口，数据分离，参数化" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_change_pwd_var" value="&#10;def test_change_pwd_var(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = conf.GY_API_URL + '/user/changepwd'&#10;    pwd = random_tool.random_pwd()&#10;    req = {&#10;        &quot;newPwd&quot;: pwd,&#10;        &quot;oldPwd&quot;: driver_data['pwd'],&#10;        &quot;reNewPwd&quot;: pwd,&#10;        &quot;userName&quot;: driver_data['user_name']&#10;    }&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.post_request(url, json=req, headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)" description="修改密码接口，变量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_cst_getAll" value="def test_change_pwd(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/cst/getAll/1/3'&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8'&#10;    }&#10;    resp = request_tool.get_request(url,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)" description="注册接口，常量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_cst_getcustomer" value="def test_getCustomer(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/cst/getCustomer'&#10;    # req = {'phone':driver_data['phone']}&#10;    req = {'phone':'15992402198'}&#10;    headers = {&#10;            'token':driver_data['token'],&#10;            'charset':'UTF-8'    &#10;    }&#10;    resp = request_tool.get_request(url,params=req,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="注册接口，常量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_lock" value="def test_lock(driver_data):&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/user/lock'&#10;    req = {'userName': driver_data['user_name']}&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8',&#10;        'Content-Type': 'application/x-www-form-urlencoded'&#10;    }    &#10;    resp = request_tool.post_request(url, json=req,headers=headers)&#10;    &#10;    resp = request_tool.post_request(url, data=req, headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;" description="修改密码接口，变量" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_lock_param" value="###########登陆接口login.xlsx################&#10;# case_name&#9;i_userName&#9;o_code&#10;# 冻结成功&#9;自动生成&#9;2000&#10;# 非登陆用户&#9;ZVMBpH4245&#9;9999&#10;# 用户不存在&#9;ZVMBpH4244&#9;9999&#10;#############################################&#10;data = excel_tool.get_test_case('data/user/冻结用户lock.xlsx')&#10;&#10;@pytest.mark.parametrize('i_userName,o_code', data[1], ids=data[0])&#10;def test_lock_param(i_userName,o_code,driver_data):&#10;    # config/conf.py里面配置GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;    url = conf.GY_API_URL + '/user/lock'&#10;    if i_userName =='自动生成':&#10;        i_userName = driver_data['user_name']&#10;&#10;    req = {'userName': i_userName}&#10;    headers = {&#10;        'token': driver_data['token'],&#10;        'charset': 'UTF-8',&#10;        'Content-Type': 'application/x-www-form-urlencoded'&#10;    }    &#10;    resp = request_tool.post_request(url, data=req,headers=headers)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], o_code)&#10;" description="修改密码接口，参数化，数据驱动" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_login" value="def test_login():&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = 'http://dev.guoyasoft.com:8080/login'&#10;    req = {&#10;        &quot;pwd&quot;: &quot;dl4xw0Lm&quot;,&#10;        &quot;userName&quot;: &quot;wUV647&quot;&#10;    }&#10;    resp = request_tool.post_request(url,json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'],2000)&#10;    data =body['data']&#10;    if data !='':&#10;        token = data['token']&#10;        assert_tool.assert_not_null(token)&#10;" description="发送login登陆请求，常量数据" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_login_param" value="###########登陆接口login.xlsx################&#10;# case_name&#9;i_pwd&#9;i_userName&#9;o_code&#9;o_token&#10;# 登陆成功&#9;dl4xw0Lm&#9;wUV647&#9;2000&#9;not null&#10;# 用户名不存在&#9;dl4xw0Lm&#9;asdfasdf&#9;9999&#9;&#10;# 密码错误&#9;aaaaaaa&#9;wUV647&#9;9999&#9;&#10;#############################################&#10;data = excel_tool.get_test_case('data/user/登陆接口login.xlsx')&#10;@pytest.mark.parametrize('i_pwd,i_userName,o_code,o_token',data[1],ids=data[0])&#10;def test_login_param(i_pwd,i_userName,o_code,o_token):&#10;    # config/conf.py里面配置GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;    url = conf.GY_API_URL+'/login'&#10;    req = {&#10;        &quot;pwd&quot;: i_pwd,&#10;        &quot;userName&quot;: i_userName&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], o_code)&#10;    data = body['data']&#10;    if o_token == 'not null' and data != '' :&#10;        token = data['token']&#10;        assert_tool.assert_not_null(token)&#10;" description="发送login登陆请求，数据分离，数据驱动" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_login_var" value="def test_login_var():&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = conf.GY_API_URL+'/login'&#10;    sql = 'select * from t_user_user limit 1'&#10;    # 先再config/conf.py里面配置DB_URL，模板快捷键demo_conf_db&#10;    db = conf.DB_URL&#10;    user = mysql_tool.query_one(sql,db)&#10;    req = {&#10;        &quot;pwd&quot;: user['pwd'],&#10;        &quot;userName&quot;: user['user_name']&#10;    }&#10;    resp = request_tool.post_request(url,json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'],2000)&#10;    data =body['data']&#10;    if data !='':&#10;        token = data['token']&#10;        assert_tool.assert_not_null(token)&#10;&#10;" description="发送login登陆请求，动态数据" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_login_zuhe" value="###########登陆接口login.xlsx################&#10;# case_name&#9;i_pwd&#9;i_userName&#9;o_code&#9;o_token&#10;# 登陆成功&#9;自动生成&#9;自动生成&#9;2000&#9;not null&#10;# 用户名不存在&#9;自动生成&#9;asdfasdf&#9;9999&#10;# 密码错误&#9;aaaaaaa&#9;自动生成&#9;9999&#10;#############################################&#10;data = excel_tool.get_test_case('data/user/登陆接口login.xlsx')&#10;@pytest.mark.parametrize('i_pwd,i_userName,o_code,o_token',data[1],ids=data[0])&#10;def test_login_zuhe(i_pwd,i_userName,o_code,o_token):&#10;    # config/conf.py里面配置GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;    url = conf.GY_API_URL+'/login'&#10;&#10;    sql = 'select * from t_user_user limit 1'&#10;    # 先再config/conf.py里面配置DB_URL，模板快捷键demo_conf_db&#10;    db = conf.DB_URL&#10;    user = mysql_tool.query_one(sql, db)&#10;&#10;    if i_pwd == '自动生成':&#10;        i_pwd = user['pwd']&#10;    if i_userName == '自动生成':&#10;        i_userName = user['user_name']&#10;&#10;    req = {&#10;        &quot;pwd&quot;: i_pwd,&#10;        &quot;userName&quot;: i_userName&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], o_code)&#10;    data = body['data']&#10;    if o_token == 'not null' and data != '' :&#10;        token = data['token']&#10;        assert_tool.assert_not_null(token)&#10;&#10;" description="发送login登陆请求，常量-变量-参数化-组合使用" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_sign_up" value="def test_sign_up():&#10;    url = 'http://dev.guoyasoft.com:8080/signup'&#10;    req = {&#10;        &quot;phone&quot;: &quot;18716253215&quot;,&#10;        &quot;pwd&quot;: &quot;aaa123&quot;,&#10;        &quot;rePwd&quot;: &quot;aaa123&quot;,&#10;        &quot;userName&quot;: &quot;wuling90&quot;&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;    data = body['data']&#10;    if data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;" description="注册接口，常量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_sign_up_param" value="########### 注册接口sign_up.xlsx ################&#10;# case_name&#9;i_user_name&#9;i_pwd&#9;i_repwd&#9;i_phone&#9;o_code&#9;o_userId&#10;# 注册成功&#9;wuling1323&#9;aaaa123&#9;aaaa123&#9;18699872345&#9;2000&#9;not null&#10;# 用户名已存在&#9;wuling1323&#9;aaaa123&#9;aaaa123&#9;18699872346&#9;9999&#10;# 手机号已存在&#9;wuling1324&#9;aaaa123&#9;aaaa123&#9;18699872345&#9;9999&#10;#############################################&#10;data = excel_tool.get_test_case('data/注册接口sign_up.xlsx')&#10;&#10;@pytest.mark.parametrize('i_user_name,i_pwd,i_repwd,i_phone,o_code,o_userId', data[1], ids=data[0])&#10;def test_sign_up_param(i_user_name, i_pwd, i_repwd, i_phone, o_code, o_userId):&#10;    # config/conf.py里面配置GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;    url = conf.GY_API_URL + '/signup'&#10;    req = {&#10;        &quot;phone&quot;: i_phone,&#10;        &quot;pwd&quot;: i_pwd,&#10;        &quot;rePwd&quot;: i_repwd,&#10;        &quot;userName&quot;: i_user_name&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], o_code)&#10;    data = body['data']&#10;    if o_userId == 'not null' and data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;" description="注册接口，数据分离" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_sign_up_var" value="def test_sign_up_var():&#10;    # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api&#10;    url = conf.GY_API_URL + '/signup'&#10;    phone = random_tool.random_tell()&#10;    pwd = random_tool.random_pwd()&#10;    pinyin = random_tool.random_name_pinyin()&#10;    num = str(random_tool.random_number(0,9))&#10;    user_name = pinyin+num&#10;    req = {&#10;        &quot;phone&quot;: phone,&#10;        &quot;pwd&quot;: pwd,&#10;        &quot;rePwd&quot;: pwd,&#10;        &quot;userName&quot;: user_name&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], 2000)&#10;    data = body['data']&#10;    if data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;&#10;&#10;" description="注册接口，变量" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="demo_api_sign_up_zuhe" value="########### 注册接口sign_up.xlsx ################&#10;# case_name&#9;i_user_name&#9;i_pwd&#9;i_repwd&#9;i_phone&#9;o_code&#9;o_userId&#10;# 注册成功&#9;自动生成&#9;自动生成&#9;自动生成&#9;自动生成&#9;2000&#9;not null&#10;# 用户名已存在&#9;wuling1323&#9;自动生成&#9;自动生成&#9;自动生成&#9;9999&#10;# 手机号已存在&#9;自动生成&#9;自动生成&#9;自动生成&#9;18699872345&#9;9999&#10;#############################################&#10;data = excel_tool.get_test_case('data/user/注册接口sign_up.xlsx')&#10;&#10;@pytest.mark.parametrize('i_user_name,i_pwd,i_repwd,i_phone,o_code,o_userId', data[1], ids=data[0])&#10;def test_sign_up_zuhe(i_user_name, i_pwd, i_repwd, i_phone, o_code, o_userId):&#10;    # config/conf.py里面配置GY_API_URL = 'http://dev.guoyasoft.com:8080'&#10;    url = conf.GY_API_URL + '/signup'&#10;    if i_user_name == '自动生成':&#10;        pinyin=random_tool.random_name_pinyin()&#10;        num=str(random_tool.random_number(0,9))&#10;        i_user_name = pinyin+num&#10;    if i_pwd == '自动生成':&#10;        i_pwd=random_tool.random_pwd()&#10;    if i_repwd == '自动生成':&#10;        i_repwd=i_pwd&#10;    if i_phone == '自动生成':&#10;        i_phone = random_tool.random_tell()&#10;&#10;    req = {&#10;        &quot;phone&quot;: i_phone,&#10;        &quot;pwd&quot;: i_pwd,&#10;        &quot;rePwd&quot;: i_repwd,&#10;        &quot;userName&quot;: i_user_name&#10;    }&#10;    resp = request_tool.post_request(url, json=req)&#10;    body = resp.json()&#10;    # 判断响应码&#10;    assert_tool.assert_equal(resp.status_code, 200)&#10;    # 自定义断言&#10;    assert_tool.assert_equal(body['code'], o_code)&#10;    data = body['data']&#10;    if o_userId == 'not null' and data != '':&#10;        user_id = data['userId']&#10;        assert_tool.assert_not_null(user_id)&#10;" description="注册接口，常量-变量-参数化-组合使用" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>